<?PHP
namespace IfCastle\Logger\FS;

use IfCastle\Logger\WriterI;

/**
 * Test class for Writer.
 * Generated by PHPUnit on 2012-02-15 at 16:33:15.
 */
class WriterTest                    extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Writer
     */
    protected Writer $writer;

    protected $system_log;
    protected $dir;

    protected $records;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $dir = UNIT_TEST_ROOT.'/../temp';
        if(!is_dir($dir))
        {
            mkdir($dir, 0777);
        }
        if(!is_dir($dir) || !is_writeable($dir))
        {
            throw new \Exception('Test temp dir not exists or not writable: '.$dir);
        }
        $dir .= '/test';
        if(!is_dir($dir))
        {
            mkdir($dir, 0777);
        }
        if(!is_dir($dir) || !is_writeable($dir))
        {
            throw new \Exception('Test temp dir not exists or not writable: '.$dir);
        }

        $this->system_log       = $dir.'/system.log_write';
        $this->dir              = $dir;

        $records    = [];

        $records[]  = ['test1' => 'test', 'test2' => 0];
        $records[]  = [1,2,3,4,5,6,7,8,9];
        $records[]  = ['this is string'];
        $records[]  = ['this is string', 'this is string', "'this is string'\n'this is string'"];
        $records[]  = [1,2,3,4,5,[8,3,4],7,8,9];
        $records[]  = ['this is string3', 'this is string3', "'this is 3 string'\n'this 4 is string'"];
        $records[]  = [1,2,3,4,5,6,7,8,9];
        $records[]  = ['this is string2', 'this is string2', ['test'], "'this is string'\n'this is string'"];
        $records[]  = ['test1' => 'test', 'test2' => 0];

        $this->records = $records;

        $this->writer = new Writer
        (
            [
                WriterI::REMOTE_ADDRESS         => '192.168.1.1',
                WriterI::TYPE                   => Writer::FILE,
                WriterI::DESTINATION            => $this->system_log,
                WriterI::ROTATION               => true,
                WriterI::MAXSIZE                => 100,
                WriterI::MAX_COUNT              => 2
            ]
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {

    }

    /**
     * Базовое тестирование записи исключений в журнал.
     * В этом тесте проверется целостность отправленных
     * и полученных данных.
     */
    public function testLog()
    {
        foreach(glob($this->dir.'/*.log_write', GLOB_NOSORT) as $file)
        {
            unlink($file);
        }

        $this->assertFalse
        (
            is_file($this->system_log),
            'initial conditions: file '.$this->system_log.' must not exists'
        );

        $this->writer->log_write($this->records);

        $system_log     = substr(file_get_contents($this->system_log),0,-2);

        $system_log     = json_decode('['.$system_log.']', true);

        $this->assertTrue(is_array($system_log), 'system.log_write log_read failed');

        $number = 1;
        foreach($this->records as $record)
        {
            $actual = array_shift($system_log);

            $count  = count($record) + 1;

            $this->assertTrue(is_array($actual), 'log_write record failed: must be array');

            $this->assertTrue
            (
                count($actual) === $count,
                'log_write record '.$number.' failed: must have '.$count.' elements'
            );

            // Первый элемент это 8
            $this->assertEquals(8, $actual[0], 'element[0] != 8');

            array_shift($actual);

            if(is_string($record))
            {
                $record     = [$record];
            }

            $this->assertEquals($record, $actual, 'element must be equal src record');

            $number++;
        }

        $this->assertTrue(count($system_log) === 0, 'system log_write not contrains more elements');
    }
}